 // ques4 ->
    /*
     * means koi string given hai eg abbbccdeefgg , so print those string which are
     * in continous form if it is one then doesnot print
     * output: ab3c2de2fg2 (a one time hai thats why we dont print the number)
     * 
     * Approach -> 1st character 1new string me daldiya or curr 1 index se chalu kra
     * ik prv rakha
     * if(prev and current) are same then count ko increment krege and print krege
     * and then next character bhi append krdege
     * 
     */
    public static String stringCompression1(String str) {
        StringBuilder sb = new StringBuilder(); //use string builder because normal string immutable we can not change
        //so here jo string given hai usme change krna hai thatswhy we use STRING BUILDER
        //Time complexity of append is O(1) while in normal string it is O(N)

        sb.append(str.charAt(0)); // -> store the first element
        for (int i = 1; i <= str.length(); i++) { // because probab of 2 has happening at the end
            int count = 1;
            while (i < str.length() && str.charAt(i) == str.charAt(i - 1)) { // i is curr, i-1 is prev
                count++;
                i++;
            }
            // if (count != 1)
            // sb.append(count);
            if (i < str.length())
                sb.append(str.charAt(i)); // cur charac
        }
        return sb.toString(); // String builder is Array so we have to return the string so we use this
    }

    public static String stringCompression2(String str) {
        StringBuilder sb = new StringBuilder();

        sb.append(str.charAt(0)); // -> store the first element
        for (int i = 1; i <= str.length(); i++) { // because probab of 2 has happening at the end
            int count = 1;
            while (i < str.length() && str.charAt(i) == str.charAt(i - 1)) { // i is curr, i-1 is prev
                count++;
                i++;
            }
            if (count != 1)
                sb.append(count);
            if (i < str.length())
                sb.append(str.charAt(i)); // cur charac
        }
        return sb.toString(); // String builder is Array so we have to return the string so we use this
    }

    // ques5 -> Toggle (means convert the caps word into the small word and small
    // word to caps word)
    // eg pePCoDinG -> output PEpcOdINg
    /*
     * Formula -> 'X' - 'A' = 'x' - 'a' [means Capital "X" me se Capital "A"
     * subtract krege && "x" me se small "a" toh same aayege ascii value]
     * (where Captial X and small x are any number)
     * 
     * Formula to convert small to caps -> so X = x - a + A
     * Formula to convert caps to small -> so x = X - A + a
     * eg: let ASCII Values of Capitals -> A is 109, B is 110 , C is 111, D is 112,
     * E is 113
     * let ASCII Values of smalls -> a is 40, b is 41 , c is 42, d is 43, e is 44
     * 
     * Convert d to Capital D ?
     * formula -> 'X' - 'A' = 'x' - 'a' => X = x - a + A (Where x id d)
     * => 43 - 40 + 109 => 3 + 109 => 112 check the value in caps
     */
    public static String toggle(String str) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            if (ch >= 'a' && ch <= 'z') {
                //means character is in small case convert to upper
                sb.append((char)(ch + 'A' - 'a'));
            } else {
                sb.append((char) (ch - 'A' + 'a'));
            }
        }
        return sb.toString();
    }